// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.

 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    /* Utilities */
    Not(in=instruction[15], out=isAInstruction);
    And(a=instruction[15], b=instruction[5], out=cInstructWriteToA);
    And(a=instruction[15], b=instruction[4], out=writeD);
    And(a=instruction[15], b=instruction[3], out=writeM);
    Or(a=cInstructWriteToA, b=isAInstruction, out=writeA);


    /* ARegister and DRegister */
    DRegister(in=aluOut, load=writeD, out=dRegOut);
    Mux16(a=aluOut, b=instruction, sel=isAInstruction, out=aluOrInstruction);
    ARegister(in=aluOrInstruction, load=writeA, out=aRegOut, out[0..14]=addressM);

    /* ALU implementation and control bit assignation 
    see https://www.nand2tetris.org/_files/ugd/44046b_552ed0898d5d491aabafd8a768a87c6f.pdf 
    section "Instruction Execution" to figure out why the "13th bit" is used below
    */
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aOrM);
    ALU(x=dRegOut, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6], out=outM, out=aluOut, zr=zr, ng=ng);


    Not(in=instruction[0],out=notJ3);
    Not(in=instruction[1],out=notJ2);
    Not(in=instruction[2],out=notJ1);
    Not(in=zr,out=notZR);
    Not(in=ng, out=notNG);
    
    And4Way(a=notJ2,b=notJ1,c=instruction[0],d=notZR, out=gtpart);
    And(a=gtpart,b=notNG,out=JGT);
   
    And4Way(a=notJ3,b=instruction[1],c=notJ1,d=zr, out=JEQ);
    And4Way(a=instruction[0],b=instruction[1],c=notJ1,d=notNG, out=JGE);
    And4Way(a=instruction[2],b=notJ2,c=notJ3,d=ng, out=JLT);
    And4Way(a=instruction[2],b=notJ2,c=instruction[0],d=notZR, out=JNE);
    Or(a=zr, b=ng, out=lowerOrEqual);
    And4Way(a=instruction[2],b=instruction[1],c=notJ3,d=lowerOrEqual, out=JLE);
    And4Way(a=instruction[2],b=instruction[1],c=instruction[0],d=true, out=JMP);

    Or8Way(in[0]=JEQ,in[1]=JGE,in[2]=JLT,in[3]=JNE,in[4]=JLE,in[5]=JMP,in[6]=JGT,in[7]=false,out=partjump);
    And(a=instruction[15],b=partjump, out=jump);
    Not(in=jump, out=inc);
    PC(in=aRegOut,load=jump,inc=inc, reset=reset,out[0..14]=pc);
}
